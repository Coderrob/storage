trigger:
  batch: true
  branches:
    include:
      - master
      - v7
  paths:
    exclude:
      - README.md
      - /doc/**/*

pr:
  branches:
    include:
      - master
  paths:
    exclude:
      - README.md
      - /doc/**/*

variables:
  - group: 'External Resources'

stages:
- stage: Build
  jobs:
  - job: Core
    pool:
      vmImage: 'windows-2019'

    steps:
    - task: gittools.gitversion.gitversion-task.GitVersion@4
      displayName: GitVersion
      inputs:
        preferBundledVersion: false

    - task: petersendev.dotnet-global-tool-installer.DotnetGlobalToolInstaller.DotnetGlobalToolInstaller@0
      displayName: 'install housework'
      inputs:
        name: housework

    - script: 'housework author src/*.csproj -s build.ini -r'
      displayName: 'author csproj'

    - task: DotNetCoreCLI@2
      displayName: 'build all'
      inputs:
        projects: src/storage.sln
        arguments: '-c release'

    - task: DotNetCoreCLI@2
      displayName: 'unit tests'
      inputs:
        command: test
        projects: test/Storage.Net.Tests
        arguments: '-c release'

    - task: CopyFiles@2
      displayName: 'copy generated nugets'
      inputs:
        SourceFolder: src
        Contents: '**/*.nupkg'
        TargetFolder: ' $(build.artifactstagingdirectory)'
        CleanTargetFolder: true
        OverWrite: true
        flattenFolders: true

    - task: PublishBuildArtifacts@1
      displayName: 'publish nugets'
      inputs:
        ArtifactName: nuget

  - job: Integration
    pool:
      vmImage: 'windows-2019'

    steps:
    - task: gittools.gitversion.gitversion-task.GitVersion@4
      displayName: GitVersion
      inputs:
         preferBundledVersion: false

    # init SonarCloud
    - task: SonarSource.sonarcloud.14d9cde6-c1da-4d55-aa01-2965cd301255.SonarCloudPrepare@1
      displayName: 'Prepare analysis on SonarCloud'
      inputs:
        SonarCloud: SonarCloud
        organization: aloneguid-github
        projectKey: aloneguid_storage
        projectName: 'Storage.Net'
        projectVersion: '$(GitVersion.SemVer)'
        extraProperties: 'sonar.cs.opencover.reportsPaths=$(Build.StagingDirectory)/coverage.xml'

    - task: DotNetCoreCLI@2
      displayName: 'Integration and Unit Test (with coverlet)'
      continueOnError: true
      inputs:
        command: test
        projects: ./src/storage.sln
        arguments: '/p:CollectCoverage=true /p:CoverletOutputFormat=opencover /p:Exclude="[xunit*]*%2c[*Test*]*" /p:CoverletOutput=$(Build.StagingDirectory)/coverage.xml'

    # finish Sonar analysis
    - task: SonarSource.sonarcloud.ce096e50-6155-4de8-8800-4221aaeed4a1.SonarCloudAnalyze@1
      displayName: 'SonarQube: Run Code Analysis'
    - task: SonarSource.sonarcloud.38b27399-a642-40af-bb7d-9971f69712e8.SonarCloudPublish@1
      displayName: 'SonarQube: Publish Quality Gate Result'


- stage: Deploy
  displayName:
  #condition: "eq(variables['Build.SourceBranch'], 'refs/heads/master')"
  condition: "or( eq(variables['Build.SourceBranch'], 'refs/heads/master'), eq(variables['Build.SourceBranch'], 'refs/heads/v7') )"
  jobs:
  - deployment: NugetOrg
    pool:
      vmImage: 'windows-2019'
    environment: live
    strategy:
      runOnce:
        deploy:
          steps:
          - task: DownloadBuildArtifacts@0
            inputs:
              buildType: 'current'
              downloadType: 'single'
              artifactName: 'nuget'
              downloadPath: '$(System.ArtifactsDirectory)'
          - task: NuGetCommand@2
            displayName: nuget.org
            inputs:
              command: push
              packagesToPush: '$(System.ArtifactsDirectory)/nuget/*.nupkg'
              nuGetFeedType: external
              publishFeedCredentials: 'nuget.org (aloneguid)'
